[project]
name = "political-strategy-game"
version = "0.8.0"
description = "Revolutionary AI-driven political strategy game with sophisticated internal politics simulation"
authors = [
    {name = "Political Strategy Game Team"},
    {name = "AI Development Experiment Contributors"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["strategy", "politics", "ai", "simulation", "4x", "game"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Turn Based Strategy",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Sociology :: History"
]
dependencies = [
    "pydantic>=2.0.0",
    "pytest>=7.0.0",
    "websockets>=11.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
llm = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
game-engine = [
    "websockets>=11.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py311']

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

