name: CI/CD Pipeline

on:
  push:
    branches: [ main, feat/*, fix/*, hotfix/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Verify uv installation
      run: uv --version

    - name: Install dependencies
      working-directory: ./political_strategy_game
      run: |
        uv sync --dev
        uv pip install pytest-cov pytest-xdist

    - name: Verify project structure
      working-directory: ./political_strategy_game
      run: |
        echo "Checking project structure..."
        ls -la
        echo "Checking src directory..."
        ls -la src/
        echo "Checking tests directory..."
        ls -la tests/

    - name: Lint with ruff (if available)
      working-directory: ./political_strategy_game
      run: |
        if uv pip list | grep -q ruff; then
          echo "Running ruff linting..."
          uv run ruff check src/ tests/ --ignore=E501,F401
        else
          echo "Ruff not installed, skipping linting"
        fi
      continue-on-error: true

    - name: Type check with mypy (if available)
      working-directory: ./political_strategy_game
      run: |
        if uv pip list | grep -q mypy; then
          echo "Running mypy type checking..."
          uv run mypy src/ --ignore-missing-imports
        else
          echo "MyPy not installed, skipping type checking"
        fi
      continue-on-error: true

    - name: Run core tests
      working-directory: ./political_strategy_game
      run: |
        echo "Running core political engine tests..."
        uv run pytest tests/test_memory.py tests/test_advisor_enhanced.py tests/test_civilization.py -v

    - name: Run comprehensive test suite
      working-directory: ./political_strategy_game
      run: |
        echo "Running full test suite..."
        uv run pytest tests/ -v --tb=short --maxfail=10

    - name: Run test suite with coverage
      working-directory: ./political_strategy_game
      run: |
        echo "Running tests with coverage reporting..."
        uv run pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing
      continue-on-error: true

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./political_strategy_game/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Test demo functionality
      working-directory: ./political_strategy_game
      run: |
        echo "Testing demo functionality..."
        timeout 30s uv run python demos/demo.py || echo "Demo completed or timed out as expected"

    - name: Validate AI integration (without external dependencies)
      working-directory: ./political_strategy_game
      run: |
        echo "Validating AI integration configuration..."
        uv run python validation/validate_config.py || echo "AI validation completed"

  quality-checks:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      working-directory: ./political_strategy_game
      run: uv sync --dev

    - name: Check code formatting with black (if available)
      working-directory: ./political_strategy_game
      run: |
        if uv pip list | grep -q black; then
          uv run black --check src/ tests/
        else
          echo "Black not installed, skipping format check"
        fi
      continue-on-error: true

    - name: Security check with bandit (if available)
      working-directory: ./political_strategy_game
      run: |
        if uv pip list | grep -q bandit; then
          uv run bandit -r src/ -f json || echo "Security scan completed"
        else
          echo "Bandit not installed, skipping security check"
        fi
      continue-on-error: true

    - name: Check for potential issues
      working-directory: ./political_strategy_game
      run: |
        echo "Checking for common issues..."
        # Check for print statements (should use logging)
        echo "Checking for print statements..."
        grep -r "print(" src/ || echo "No print statements found"
        # Check for TODO/FIXME comments
        echo "Checking for TODO/FIXME comments..."
        grep -r "TODO\|FIXME" src/ || echo "No TODO/FIXME comments found"

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      working-directory: ./political_strategy_game
      run: uv sync --dev

    - name: Run interactive system integration tests
      working-directory: ./political_strategy_game
      run: |
        echo "Running interactive system integration tests..."
        if [ -d "tests/interactive" ]; then
          uv run pytest tests/interactive/ -v --tb=short
        else
          echo "No interactive tests found"
        fi

    - name: Test system performance
      working-directory: ./political_strategy_game
      run: |
        echo "Testing system performance..."
        timeout 60s uv run python -c "
        import time
        import sys
        try:
            from src.core.civilization import Civilization
            from src.llm.advisors import AdvisorPersonality
            
            start_time = time.time()
            
            # Create test civilization
            civ = Civilization('Test Empire')
            
            # Test basic civilization functionality
            summary = civ.get_civilization_summary()
            
            elapsed = time.time() - start_time
            print(f'Performance test completed in {elapsed:.2f} seconds')
            
            if elapsed > 30:
                print('WARNING: Performance test took longer than expected')
                sys.exit(1)
            else:
                print('Performance test passed')
                
        except Exception as e:
            print(f'Performance test failed: {e}')
            sys.exit(1)
        " || echo "Performance test completed"
